	
	
	-- 회원 관리 기능
	
	
	-- 댓글형 게시판 작업 (공지사항: notice, 댓글: reply)
	   1. 게시글 테이블과 댓글 테이블이 별도로 존재한다.
	   2. 외래키를 이용해 관계를 설정한다.
	   3. 페이징 처리한다.  (MVC패턴에서 사용, 페이징 처리 메소드) : 필요한 대상을 service에 모두 구현하고 method(service)만 호출하면 동작되도록
	   4. 게시글에 조회수를 처리한다.
	   5. 게시글 삭제는 댓글 존재를 고려해야 한다.  ==> 댓글은 지우지 않는 형태로 한다. 
	   	  (댓글이 달린 게시글은 지울 수 없으므로) ---> 외래키를 이용함.
	   6. 로그인 한 회원만 작성할 수 있다.
	   7. 검색 기능이 가능하다.
	   
	
	-- 계층형 게시판 (자유게시판 : FREE)  		   (사용자에게서는 삭제가 되고, DB에서는 삭제되지 않음 )
	   1. 게시판 1개로 게시글과 댓글을 모두 저장한다.
	   2. 게시글 / 댓글 구분을 위한 정보가 필요하다.
	   3. 게시글 / 댓글 정렬을 위한 정보가 필요하다.			== 구분을 위한 정렬방식 :: 게시글에 댓글을 다는 것인지.....댓글에 댓글을 다는 것인지...순서가 난리나므로 구분이 필요함.
	   4. 삭제하지 않는 삭제 기능을 사용한다.
	   5. 페이징 처리한다. (Page 객체를 이용한 초기 버전, 직접 모두 만들기)  ** 직접 모두 만들기 : ajax 작업 시, 필요 함.
	   6. 검색 기능이 가능하다.	
		
	-- 이미지 게시판 (이미지게시판 : BOARD, 댓글 : COMMENTS)
	   1. 댓글 처리
	   2. 삭제 시, ajax로 댓글 확인 후 삭제 진행
	   3. 댓글 리스트 ajax

	   
	   미국은 객체지향 DB를 사용함 (Hibernate ORM)(한국과 가까운 아시아권 ex 일본)은 mybatis 사용함.
	 HQL(Hibernate Query Language)
	 HQL(Hibernate Query Language)이라 불리는 매우 강력한 쿼리 언어를 포함하고 있다.
		HQL은 SQL과 매우 비슷하며 추가적인 컨벤션을 정의할 수도 있다.
		HQL은 완전히 객체 지향적이며 이로써 상속, 다형성, 관계등의 객체지향의 강점을 누릴 수 있다.
		HQL쿼리는 자바 클래스와 프로퍼티의 이름을 제외하고는 대소문자를 구분한다.
		HQL은 쿼리 결과로 객체를 반환하며 프로그래머에 의해 생성되고 직접적으로 접근할 수 있다.
		HQL은 SQL에서는 지원하지 않는 페이지네이션이나 동적 프로파일링과 같은 향상된 기능을 제공한다.
		HQL은 여러 테이블을 작업할 때 명시적인 join을 요구하지 않는다.
		
	장점
		객체지향적으로 데이터를 관리할 수 있기 때문에 비즈니스 로직에 집중 할 수 있으며, 객체지향 개발이 가능하다.
		테이블 생성, 변경, 관리가 쉽다. (JPA를 잘 이해하고 있는 경우)
		로직을 쿼리에 집중하기 보다는 객체자체에 집중 할 수 있다.
		빠른 개발이 가능하다.
	
	단점
		어렵다. (많은 내용이 감싸져 있기 때문에 알아야 할 것이 많다.)
		잘 이해하고 사용하지 않으면 데이터 손실이 있을 수 있다. (persistence context)
		성능상 문제가 있을 수 있다. (이 문제 또한 잘 이해해야 해결이 가능하다.)
